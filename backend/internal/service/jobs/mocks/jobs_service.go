// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "scheduler-service/pkg/model"
)

// JobsService is an autogenerated mock type for the JobsService type
type JobsService struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, job
func (_m *JobsService) CreateJob(ctx context.Context, job model.Job) (model.Job, error) {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 model.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Job) (model.Job, error)); ok {
		return rf(ctx, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Job) model.Job); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(model.Job)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobs provides a mock function with given fields: ctx
func (_m *JobsService) GetJobs(ctx context.Context) ([]model.Job, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 []model.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: job
func (_m *JobsService) UpdateJobStatus(job *model.Status) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Status) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobsService creates a new instance of JobsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobsService {
	mock := &JobsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
